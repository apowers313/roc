{
	// Place your roc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"ROC Component": {
		"scope": "python",
		"prefix": "component",
		"body": [
			"from typing import Any, Iterable",
			"from .component import Component, register_component",
			"from .event import Event, EventBus",
			"class ${2:upper_name}Data:",
			"    pass",
			"${2:upper_name}Event = Event[${2:upper_name}Data]",
			"@register_component(\"${1:name}\", \"${1:name}\", auto=True)",
			"class ${2:upper_name}(Component):",
			"    bus = EventBus[${2:upper_name}Data](\"${1:name}\")",
			"    def __init__(self) -> None:",
			"        super().__init__()",
			"        self.${1:name}_conn = self.connect_bus(${2:upper_name}.bus)",
			"        self.${1:name}_conn.listen(self.do_${1:name})",
			"    def event_filter(self, e: Event[Any]) -> bool:",
			"        return isinstance(e.data, ${2:upper_name}Data)",
			"    def do_${1:name}(self, e: ${2:upper_name}Event) -> None:",
			"        pass"
		],
		"description": "A component for communicating with other parts of the system"
	}
}